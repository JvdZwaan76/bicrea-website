/**
 * Bicrea - Complete Website JavaScript
 * All functionality for luxury property investment website
 */

(function() {
    'use strict';

    // Utility functions
    const $ = (selector) => document.querySelector(selector);
    const $$ = (selector) => document.querySelectorAll(selector);
    
    // Throttle function for performance
    const throttle = (func, limit) => {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    };

    // Debounce function for resize events
    const debounce = (func, wait) => {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };

    // Initialize everything when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Bicrea website initializing...');
        
        initNavigation();
        initScrollEffects();
        initAnimations();
        initSmoothScrolling();
        initContactForm();
        initFAQ();
        initPortfolioFilters();
        initTeamInteractions();
        initServiceCardInteractions();
        initPerformanceOptimizations();
        
        console.log('Bicrea website initialized successfully!');
    });

    // Navigation functionality
    function initNavigation() {
        const navToggle = $('#navToggle');
        const navMenu = $('#navMenu');
        const navLinks = $$('.nav-link');
        const navbar = $('.navbar');

        if (navToggle && navMenu) {
            // Mobile menu toggle
            navToggle.addEventListener('click', () => {
                navToggle.classList.toggle('active');
                navMenu.classList.toggle('active');
                document.body.classList.toggle('nav-open');
            });

            // Close menu when clicking on a link
            navLinks.forEach(link => {
                link.addEventListener('click', () => {
                    navToggle.classList.remove('active');
                    navMenu.classList.remove('active');
                    document.body.classList.remove('nav-open');
                });
            });

            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!navToggle.contains(e.target) && !navMenu.contains(e.target)) {
                    navToggle.classList.remove('active');
                    navMenu.classList.remove('active');
                    document.body.classList.remove('nav-open');
                }
            });
        }

        // Navbar scroll effect
        if (navbar) {
            const handleScroll = throttle(() => {
                if (window.scrollY > 100) {
                    navbar.classList.add('scrolled');
                } else {
                    navbar.classList.remove('scrolled');
                }
            }, 16);

            window.addEventListener('scroll', handleScroll);
        }

        // Active link highlighting
        function updateActiveLink() {
            const sections = $$('section[id]');
            const scrollPos = window.scrollY + 100;

            sections.forEach(section => {
                const sectionTop = section.offsetTop;
                const sectionHeight = section.offsetHeight;
                const sectionId = section.getAttribute('id');
                
                if (scrollPos >= sectionTop && scrollPos < sectionTop + sectionHeight) {
                    navLinks.forEach(link => {
                        link.classList.remove('active');
                        if (link.getAttribute('href') === `#${sectionId}` || 
                            (sectionId === 'hero' && link.getAttribute('href') === '/')) {
                            link.classList.add('active');
                        }
                    });
                }
            });
        }

        window.addEventListener('scroll', throttle(updateActiveLink, 16));
    }

    // Scroll effects and animations
    function initScrollEffects() {
        // Intersection Observer for scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animated');
                    
                    // Special handling for stat cards
                    if (entry.target.classList.contains('stat-card') || 
                        entry.target.classList.contains('legacy-item')) {
                        setTimeout(() => animateCounters(), 300);
                    }
                }
            });
        }, observerOptions);

        // Observe elements for animation
        const animateElements = $$('.animate-on-scroll, .service-card, .portfolio-item, .legacy-item, .stat-card, .team-preview-item, .testimonial-card, .value-item');
        animateElements.forEach(el => {
            el.classList.add('animate-on-scroll');
            observer.observe(el);
        });

        // Parallax effect for hero section
        const hero = $('.hero');
        if (hero) {
            const parallaxEffect = throttle(() => {
                const scrolled = window.pageYOffset;
                const rate = scrolled * -0.3;
                hero.style.transform = `translate3d(0, ${rate}px, 0)`;
            }, 16);

            window.addEventListener('scroll', parallaxEffect);
        }
    }

    // Counter animation for numbers
    function animateCounters() {
        const counters = $$('.stat-value, .legacy-number');
        counters.forEach(counter => {
            const target = parseFloat(counter.textContent.replace(/[^\d.]/g, ''));
            const suffix = counter.textContent.replace(/[\d.]/g, '');
            const isFloat = counter.textContent.includes('.');
            const duration = 2000;
            const step = target / (duration / 16);
            let current = 0;

            const timer = setInterval(() => {
                current += step;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                
                const displayValue = isFloat ? current.toFixed(1) : Math.floor(current);
                counter.textContent = displayValue + suffix;
            }, 16);
        });
    }

    // Animation initialization
    function initAnimations() {
        // Staggered animations for hero content
        const heroElements = $$('.hero .animate__animated');
        heroElements.forEach((el, index) => {
            el.style.animationDelay = `${index * 0.3}s`;
        });

        // Portfolio item hover effects
        const portfolioItems = $$('.portfolio-item');
        portfolioItems.forEach(item => {
            item.addEventListener('mouseenter', () => {
                item.style.transform = 'translateY(-10px) scale(1.02)';
            });

            item.addEventListener('mouseleave', () => {
                item.style.transform = 'translateY(0) scale(1)';
            });
        });
    }

    // Smooth scrolling for anchor links
    function initSmoothScrolling() {
        const anchorLinks = $$('a[href^="#"]');
        
        anchorLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const target = $(link.getAttribute('href'));
                
                if (target) {
                    const offsetTop = target.offsetTop - 80; // Account for fixed navbar
                    
                    window.scrollTo({
                        top: offsetTop,
                        behavior: 'smooth'
                    });
                }
            });
        });
    }

    // Contact form handling
    function initContactForm() {
        const form = $('#contact-form');
        
        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = new FormData(form);
                const submitBtn = form.querySelector('button[type="submit"]');
                const originalContent = submitBtn.innerHTML;
                
                // Disable submit button and show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
                
                try {
                    // Simulate form submission (replace with actual endpoint)
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    // Show success message
                    showNotification('Thank you! Your message has been sent successfully. We will respond within 24 hours.', 'success');
                    form.reset();
                    
                } catch (error) {
                    // Show error message
                    showNotification('Sorry, there was an error sending your message. Please try again or contact us directly.', 'error');
                } finally {
                    // Reset submit button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalContent;
                }
            });
        }
    }

    // FAQ functionality
    function initFAQ() {
        const faqItems = $$('.faq-item');
        
        faqItems.forEach(item => {
            const question = item.querySelector('.faq-question');
            const answer = item.querySelector('.faq-answer');
            
            if (question && answer) {
                question.addEventListener('click', () => {
                    const isActive = item.classList.contains('active');
                    
                    // Close all other FAQ items
                    faqItems.forEach(otherItem => {
                        if (otherItem !== item) {
                            otherItem.classList.remove('active');
                        }
                    });
                    
                    // Toggle current item
                    if (isActive) {
                        item.classList.remove('active');
                    } else {
                        item.classList.add('active');
                    }
                });
            }
        });
    }

    // Portfolio filtering
    function initPortfolioFilters() {
        const filterBtns = $$('.filter-btn');
        const portfolioItems = $$('.portfolio-detailed-item');
        
        if (filterBtns.length === 0 || portfolioItems.length === 0) return;
        
        filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const filter = btn.getAttribute('data-filter');
                
                // Update active button
                filterBtns.forEach(otherBtn => otherBtn.classList.remove('active'));
                btn.classList.add('active');
                
                // Filter portfolio items
                portfolioItems.forEach((item, index) => {
                    const category = item.getAttribute('data-category');
                    const shouldShow = filter === 'all' || (category && category.includes(filter));
                    
                    if (shouldShow) {
                        item.classList.remove('hidden');
                        item.classList.add('visible');
                        item.style.animationDelay = `${index * 0.1}s`;
                    } else {
                        item.classList.add('hidden');
                        item.classList.remove('visible');
                    }
                });
            });
        });
    }

    // Team member interactions
    function initTeamInteractions() {
        const teamMembers = $$('.team-member, .team-preview-item');
        
        teamMembers.forEach(member => {
            const image = member.querySelector('.member-image img, .team-preview-image img');
            const overlay = member.querySelector('.member-overlay');
            
            member.addEventListener('mouseenter', () => {
                if (image) image.style.transform = 'scale(1.1)';
                if (overlay) overlay.style.opacity = '1';
            });
            
            member.addEventListener('mouseleave', () => {
                if (image) image.style.transform = 'scale(1)';
                if (overlay) overlay.style.opacity = '0';
            });
        });
    }

    // Service card interactions
    function initServiceCardInteractions() {
        const serviceCards = $$('.service-card, .additional-service-card');
        
        serviceCards.forEach(card => {
            card.addEventListener('mouseenter', () => {
                // Add glow effect
                card.style.boxShadow = '0 20px 60px rgba(212, 175, 55, 0.2)';
                
                // Animate icon
                const icon = card.querySelector('.service-icon');
                if (icon) {
                    icon.style.transform = 'scale(1.1) rotate(5deg)';
                }
            });
            
            card.addEventListener('mouseleave', () => {
                // Remove glow effect
                card.style.boxShadow = '';
                
                // Reset icon
                const icon = card.querySelector('.service-icon');
                if (icon) {
                    icon.style.transform = '';
                }
            });
        });
    }

    // Notification system
    function showNotification(message, type = 'info') {
        // Remove existing notifications
        const existingNotifications = $$('.notification');
        existingNotifications.forEach(notification => {
            notification.remove();
        });

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span>${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;
        
        // Add styles
        const bgColor = type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8';
        notification.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 10000;
            background: ${bgColor};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 400px;
            font-family: Inter, sans-serif;
        `;
        
        document.body.appendChild(notification);
        
        // Slide in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Auto remove
        const autoRemoveTimer = setTimeout(() => {
            removeNotification(notification);
        }, 5000);
        
        // Close button
        const closeBtn = notification.querySelector('.notification-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                clearTimeout(autoRemoveTimer);
                removeNotification(notification);
            });
        }
    }

    function removeNotification(notification) {
        if (notification && notification.parentNode) {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }
    }

    // Performance optimizations
    function initPerformanceOptimizations() {
        // Lazy loading for images
        const images = $$('img[loading="lazy"]');
        
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        
                        // Add loading animation
                        img.style.opacity = '0';
                        img.style.transition = 'opacity 0.3s ease';
                        
                        img.onload = () => {
                            img.style.opacity = '1';
                        };
                        
                        // Use data-src if available, otherwise use src
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                        }
                        
                        img.classList.remove('lazy');
                        imageObserver.unobserve(img);
                    }
                });
            });

            images.forEach(img => {
                img.classList.add('lazy');
                imageObserver.observe(img);
            });
        }

        // Preload critical resources
        const preloadLinks = [
            '/images/hero.jpg',
            '/images/about.jpg'
        ];

        preloadLinks.forEach(href => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.as = 'image';
            link.href = href;
            document.head.appendChild(link);
        });

        // Progressive enhancement for animations
        if (window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
            // Disable animations for users who prefer reduced motion
            document.documentElement.style.setProperty('--transition-smooth', 'none');
            document.documentElement.style.setProperty('--transition-bounce', 'none');
        }
    }

    // Handle resize events
    window.addEventListener('resize', debounce(() => {
        // Update viewport height for mobile
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }, 250));

    // Initialize viewport height fix for mobile
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);

    // Error handling
    window.addEventListener('error', (e) => {
        console.error('JavaScript error:', e.error);
    });

    // Prevent FOUC (Flash of Unstyled Content)
    document.documentElement.classList.add('js-loaded');

    // Add loading class to body initially
    document.body.classList.add('loading');
    
    // Remove loading class when everything is loaded
    window.addEventListener('load', () => {
        document.body.classList.remove('loading');
        document.body.classList.add('loaded');
    });

})();