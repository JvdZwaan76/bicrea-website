// Bicrea Website Interactive JavaScript

document.addEventListener('DOMContentLoaded', function() {
    
    // Navigation Toggle for Mobile
    const navToggle = document.getElementById('navToggle');
    const navMenu = document.getElementById('navMenu');
    
    if (navToggle && navMenu) {
        navToggle.addEventListener('click', function() {
            navMenu.classList.toggle('active');
            navToggle.classList.toggle('active');
        });
    }
    
    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                // Close mobile menu if open
                if (navMenu && navMenu.classList.contains('active')) {
                    navMenu.classList.remove('active');
                    if (navToggle) navToggle.classList.remove('active');
                }
            }
        });
    });
    
    // Navbar scroll effect
    const navbar = document.getElementById('navbar') || document.querySelector('.navbar');
    let lastScrollTop = 0;
    
    if (navbar) {
        window.addEventListener('scroll', function() {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            
            // Add/remove scrolled class
            if (scrollTop > 100) {
                navbar.classList.add('scrolled');
            } else {
                navbar.classList.remove('scrolled');
            }
            
            lastScrollTop = scrollTop;
        });
    }
    
    // Animate elements on scroll
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('in-view');
            }
        });
    }, observerOptions);
    
    // Observe all elements with animate-on-scroll class
    document.querySelectorAll('.animate-on-scroll').forEach(el => {
        observer.observe(el);
    });
    
    // Add active class to navigation based on scroll position
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    if (sections.length > 0 && navLinks.length > 0) {
        window.addEventListener('scroll', function() {
            let current = '';
            
            sections.forEach(section => {
                const sectionTop = section.offsetTop;
                const sectionHeight = section.clientHeight;
                if (window.pageYOffset >= sectionTop - 200) {
                    current = section.getAttribute('id');
                }
            });
            
            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === `#${current}` || 
                    (current === '' && link.getAttribute('href') === '/')) {
                    link.classList.add('active');
                }
            });
        });
    }
    
    // Counter animation for statistics
    function animateCounter(element, target, duration = 2000) {
        let start = 0;
        const increment = target / (duration / 16); // 60fps
        
        const timer = setInterval(() => {
            start += increment;
            if (start >= target) {
                element.textContent = formatNumber(target);
                clearInterval(timer);
            } else {
                element.textContent = formatNumber(Math.floor(start));
            }
        }, 16);
    }
    
    function formatNumber(num) {
        if (num >= 1000000000) {
            return (num / 1000000000).toFixed(1) + 'B';
        } else if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }
    
    // Animate counters when they come into view
    const statValues = document.querySelectorAll('.stat-value, .stat-number');
    const statObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting && !entry.target.classList.contains('animated')) {
                entry.target.classList.add('animated');
                const text = entry.target.textContent;
                const number = parseFloat(text.replace(/[^0-9.]/g, ''));
                
                // Handle different number formats
                let target = number;
                if (text.includes('B')) target = number * 1000000000;
                else if (text.includes('M')) target = number * 1000000;
                else if (text.includes('K')) target = number * 1000;
                else if (text.includes('%')) target = number;
                else if (text.includes('+')) target = number;
                
                entry.target.textContent = '0';
                animateCounter(entry.target, target);
                
                // Add back any suffix
                setTimeout(() => {
                    if (text.includes('%')) {
                        entry.target.textContent = entry.target.textContent + '%';
                    } else if (text.includes('+')) {
                        entry.target.textContent = entry.target.textContent + '+';
                    }
                }, 2100);
            }
        });
    }, observerOptions);
    
    statValues.forEach(stat => {
        statObserver.observe(stat);
    });
    
    // Portfolio Filter Functionality
    const filterButtons = document.querySelectorAll('.filter-btn');
    const portfolioItems = document.querySelectorAll('.portfolio-detailed-item');
    
    if (filterButtons.length > 0 && portfolioItems.length > 0) {
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                const filter = this.getAttribute('data-filter');
                
                // Update active button
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                
                // Filter portfolio items
                portfolioItems.forEach(item => {
                    const category = item.getAttribute('data-category');
                    
                    if (filter === 'all' || category === filter || (category && category.includes(filter))) {
                        item.style.display = 'grid';
                        item.style.animation = 'fadeInUp 0.6s ease forwards';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
        });
    }
    
    // FAQ Toggle Functionality
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');
        const answer = item.querySelector('.faq-answer');
        
        if (question && answer) {
            question.addEventListener('click', function() {
                const isActive = item.classList.contains('active');
                
                // Close all other FAQ items
                faqItems.forEach(otherItem => {
                    otherItem.classList.remove('active');
                    const otherAnswer = otherItem.querySelector('.faq-answer');
                    if (otherAnswer) {
                        otherAnswer.style.display = 'none';
                    }
                });
                
                // Toggle current item
                if (!isActive) {
                    item.classList.add('active');
                    answer.style.display = 'block';
                }
            });
        }
    });
    
    // Contact Form Handling
    const contactForm = document.getElementById('contact-form');
    
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form data
            const formData = new FormData(this);
            const formObject = {};
            formData.forEach((value, key) => {
                formObject[key] = value;
            });
            
            // Basic validation
            const requiredFields = ['firstName', 'lastName', 'email', 'subject', 'message'];
            const missingFields = [];
            
            requiredFields.forEach(field => {
                if (!formObject[field] || formObject[field].trim() === '') {
                    missingFields.push(field);
                }
            });
            
            if (missingFields.length > 0) {
                alert('Please fill in all required fields.');
                return;
            }
            
            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(formObject.email)) {
                alert('Please enter a valid email address.');
                return;
            }
            
            // Show success message (replace with actual form submission logic)
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            
            submitButton.innerHTML = '<span>Sending...</span>';
            submitButton.disabled = true;
            
            // Simulate form submission
            setTimeout(() => {
                alert('Thank you for your message! We will get back to you within 24 hours.');
                this.reset();
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            }, 2000);
        });
    }
    
    // Parallax effect for hero section
    const hero = document.querySelector('.hero');
    if (hero) {
        window.addEventListener('scroll', throttle(function() {
            const scrolled = window.pageYOffset;
            const parallax = scrolled * 0.5;
            hero.style.transform = `translateY(${parallax}px)`;
        }, 10));
    }
    
    // Add loading animation delays
    const animatedElements = document.querySelectorAll('.animate__animated');
    animatedElements.forEach((el, index) => {
        if (!el.classList.contains('animate__delay-1s') && 
            !el.classList.contains('animate__delay-2s')) {
            el.style.animationDelay = `${index * 0.1}s`;
        }
    });
    
    // Enhanced Form handling for all forms
    const forms = document.querySelectorAll('form:not(#contact-form)');
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('Form submitted:', this);
        });
    });
    
    // Add smooth reveal animation for portfolio items
    const portfolioItemsGeneral = document.querySelectorAll('.portfolio-item, .portfolio-detailed-item');
    portfolioItemsGeneral.forEach((item, index) => {
        item.style.animationDelay = `${index * 0.2}s`;
    });
    
    // Image lazy loading enhancement
    const images = document.querySelectorAll('img[loading="lazy"]');
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.classList.add('loaded');
                    observer.unobserve(img);
                }
            });
        });
        
        images.forEach(img => imageObserver.observe(img));
    }
    
    // Add hover effects for interactive elements
    const interactiveElements = document.querySelectorAll('.btn, .service-card, .portfolio-item, .team-preview-item, .team-member, .value-item, .testimonial-card, .stat-card, .legacy-item, .mission-card, .vision-card');
    interactiveElements.forEach(element => {
        element.addEventListener('mouseenter', function() {
            if (!this.style.transform || this.style.transform === 'none') {
                this.style.transform = 'translateY(-5px)';
            }
        });
        
        element.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
        });
    });
    
    // Add click ripple effect for buttons
    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(button => {
        button.addEventListener('click', function(e) {
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;
            
            ripple.style.cssText = `
                position: absolute;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.3);
                transform: scale(0);
                animation: ripple 0.6s linear;
                width: ${size}px;
                height: ${size}px;
                left: ${x}px;
                top: ${y}px;
                pointer-events: none;
            `;
            
            this.style.position = 'relative';
            this.style.overflow = 'hidden';
            this.appendChild(ripple);
            
            setTimeout(() => {
                if (ripple.parentNode) {
                    ripple.remove();
                }
            }, 600);
        });
    });
    
    // Map container interaction
    const mapContainers = document.querySelectorAll('.map-container');
    mapContainers.forEach(container => {
        container.addEventListener('click', function() {
            // Add actual map integration here
            console.log('Map clicked - integrate with Google Maps or preferred map service');
        });
    });
    
    // Team member social links
    const memberSocialLinks = document.querySelectorAll('.member-social a');
    memberSocialLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Social link clicked:', this.getAttribute('href'));
        });
    });
    
    // Smooth scrolling for internal links
    const internalLinks = document.querySelectorAll('a[href^="/"]');
    internalLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            // Add page transition animation here if desired
            console.log('Internal navigation to:', this.getAttribute('href'));
        });
    });
    
    // Enhanced scroll animations
    const enhancedScrollElements = document.querySelectorAll('.service-card, .portfolio-item, .team-member, .value-item, .testimonial-card');
    
    const enhancedObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }, index * 100);
            }
        });
    }, { threshold: 0.1 });
    
    enhancedScrollElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(50px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        enhancedObserver.observe(el);
    });
    
    // Page-specific initializations
    const currentPage = window.location.pathname;
    
    if (currentPage.includes('portfolio')) {
        initializePortfolioPage();
    } else if (currentPage.includes('contact')) {
        initializeContactPage();
    } else if (currentPage.includes('about')) {
        initializeAboutPage();
    }
    
    function initializePortfolioPage() {
        console.log('Portfolio page initialized');
        
        // Initialize masonry layout if needed
        const portfolioGrid = document.querySelector('.portfolio-detailed-grid');
        if (portfolioGrid) {
            // Add staggered animation
            const items = portfolioGrid.querySelectorAll('.portfolio-detailed-item');
            items.forEach((item, index) => {
                item.style.animationDelay = `${index * 0.3}s`;
            });
        }
    }
    
    function initializeContactPage() {
        console.log('Contact page initialized');
        
        // Add form field focus effects
        const formControls = document.querySelectorAll('.form-control');
        formControls.forEach(control => {
            control.addEventListener('focus', function() {
                this.parentElement.classList.add('focused');
            });
            
            control.addEventListener('blur', function() {
                this.parentElement.classList.remove('focused');
            });
        });
    }
    
    function initializeAboutPage() {
        console.log('About page initialized');
        
        // Add story section parallax
        const storyImage = document.querySelector('.story-image img');
        if (storyImage) {
            window.addEventListener('scroll', throttle(function() {
                const scrolled = window.pageYOffset;
                const rate = scrolled * -0.3;
                storyImage.style.transform = `translateY(${rate}px)`;
            }, 10));
        }
    }
    
    // Add CSS for dynamic styles
    const style = document.createElement('style');
    style.textContent = `
        @keyframes ripple {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }
        
        .navbar.scrolled {
            background: rgba(10, 10, 10, 0.98);
            box-shadow: 0 2px 20px rgba(212, 175, 55, 0.1);
        }
        
        img.loaded {
            opacity: 1;
            transform: scale(1);
        }
        
        img[loading="lazy"] {
            opacity: 0;
            transform: scale(0.9);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .form-group.focused label {
            color: #f4d03f;
            transform: translateY(-2px);
        }
        
        .nav-toggle.active span:nth-child(1) {
            transform: rotate(45deg) translate(5px, 5px);
        }
        
        .nav-toggle.active span:nth-child(2) {
            opacity: 0;
        }
        
        .nav-toggle.active span:nth-child(3) {
            transform: rotate(-45deg) translate(7px, -6px);
        }
        
        .portfolio-detailed-item[data-category] {
            transition: all 0.6s ease;
        }
        
        .portfolio-detailed-item[style*="display: none"] {
            opacity: 0;
            transform: scale(0.8);
        }
        
        .faq-question i {
            transition: transform 0.3s ease;
        }
        
        .faq-item.active .faq-question i {
            transform: rotate(45deg);
        }
        
        .animate-on-scroll {
            transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        
        .animate-on-scroll.in-view {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
        
        @media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    `;
    document.head.appendChild(style);
    
    // Initialize tooltips and other enhanced features
    initializeEnhancedFeatures();
    
    function initializeEnhancedFeatures() {
        // Add scroll progress indicator
        const progressBar = document.createElement('div');
        progressBar.className = 'scroll-progress';
        progressBar.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 0%;
            height: 3px;
            background: linear-gradient(90deg, #d4af37, #f4d03f);
            z-index: 9999;
            transition: width 0.1s ease;
        `;
        document.body.appendChild(progressBar);
        
        window.addEventListener('scroll', throttle(function() {
            const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
            const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
            const scrolled = (winScroll / height) * 100;
            progressBar.style.width = scrolled + '%';
        }, 10));
    }
    
    console.log('Bicrea website JavaScript initialized successfully');
});

// Utility function for smooth animations
function easeInOutQuad(t) {
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
}

// Performance optimization: throttle scroll events
function throttle(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Debounce function for resize events
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Add resize handler for responsive adjustments
window.addEventListener('resize', debounce(function() {
    // Recalculate layouts if needed
    const portfolioItems = document.querySelectorAll('.portfolio-detailed-item');
    portfolioItems.forEach(item => {
        if (window.innerWidth <= 768) {
            item.style.gridTemplateColumns = '1fr';
        }
    });
}, 250));
